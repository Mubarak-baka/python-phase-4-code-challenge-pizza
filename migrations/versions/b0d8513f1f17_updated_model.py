"""updated model

Revision ID: b0d8513f1f17
Revises: 4ea44ab4233d
Create Date: 2025-01-25 22:45:16.669158

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b0d8513f1f17'
down_revision = '4ea44ab4233d'
branch_labels = None
depends_on = None


def upgrade():
    # Get the connection to the database
    conn = op.get_bind()

    # Check if the new_pizzas table already exists
    if not conn.dialect.has_table(conn, 'new_pizzas'):
        # Create new_pizzas table
        op.create_table(
            'new_pizzas',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('name', sa.String(), nullable=False),  # Ensure NOT NULL
            sa.Column('ingredients', sa.String(), nullable=False)
        )

        # Copy data from the old table to the new table
        op.execute('INSERT INTO new_pizzas (id, name, ingredients) SELECT id, name, ingredients FROM pizzas')

        # Drop the old table
        op.drop_table('pizzas')

        # Rename the new table to the old table's name
        op.rename_table('new_pizzas', 'pizzas')

    # Add new columns to restaurant_pizzas as nullable first
    op.add_column('restaurant_pizzas', sa.Column('restaurant_id', sa.Integer(), nullable=True))
    op.add_column('restaurant_pizzas', sa.Column('pizza_id', sa.Integer(), nullable=True))

    # Create foreign keys
    op.create_foreign_key(op.f('fk_restaurant_pizzas_pizza_id_pizzas'), 'restaurant_pizzas', 'pizzas', ['pizza_id'], ['id'])
    op.create_foreign_key(op.f('fk_restaurant_pizzas_restaurant_id_restaurants'), 'restaurant_pizzas', 'restaurants', ['restaurant_id'], ['id'])

    # Alter the columns to be NOT NULL
    op.alter_column('restaurant_pizzas', 'restaurant_id', nullable=False)
    op.alter_column('restaurant_pizzas', 'pizza_id', nullable=False)

    # Check if the new_restaurants table already exists
    if not conn.dialect.has_table(conn, 'new_restaurants'):
        # Create new_restaurants table
        op.create_table(
            'new_restaurants',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('name', sa.String(), nullable=False),  # Ensure NOT NULL
            sa.Column('address', sa.String(), nullable=False)
        )

        # Copy data from the old table to the new table
        op.execute('INSERT INTO new_restaurants (id, name, address) SELECT id, name, address FROM restaurants')

        # Drop the old table
        op.drop_table('restaurants')

        # Rename the new table to the old table's name
        op.rename_table('new_restaurants', 'restaurants')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('restaurants', 'address',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('restaurants', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint(op.f('fk_restaurant_pizzas_restaurant_id_restaurants'), 'restaurant_pizzas', type_='foreignkey')
    op.drop_constraint(op.f('fk_restaurant_pizzas_pizza_id_pizzas'), 'restaurant_pizzas', type_='foreignkey')
    op.drop_column('restaurant_pizzas', 'pizza_id')
    op.drop_column('restaurant_pizzas', 'restaurant_id')
    op.alter_column('pizzas', 'ingredients',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('pizzas', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    # ### end Alembic commands ###